package carsharing.dao;

import carsharing.dataLayer.DataBaseConnection;
import carsharing.entity.Car;
import carsharing.entity.Company;
import carsharing.entity.Customer;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;

public class CompanyDAOImpl implements CompanyDAO {

    DataBaseConnection dataBaseConnection;

    public CompanyDAOImpl(DataBaseConnection dataBaseConnection) {
        this.dataBaseConnection = dataBaseConnection;
        try (Connection c = this.dataBaseConnection.createConnection();
             Statement s = c.createStatement()) {
//            s.executeUpdate("DROP TABLE IF EXISTS CUSTOMER");
//            s.executeUpdate("DROP TABLE IF EXISTS CAR");
//            s.executeUpdate("DROP TABLE IF EXISTS COMPANY");


            String sqlCompany = "CREATE TABLE IF NOT EXISTS COMPANY" +
                    "(ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    " NAME VARCHAR(255) UNIQUE NOT NULL, " +
                    " PRIMARY KEY ( ID ))";
            s.executeUpdate(sqlCompany);


            String sqlCar = "CREATE TABLE IF NOT EXISTS CAR" +
                    "(ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "NAME VARCHAR(255) UNIQUE NOT NULL, " +
                    "COMPANY_ID INT NOT NULL," +
                    "FOREIGN KEY (COMPANY_ID) references COMPANY(ID)" +
                    "ON UPDATE CASCADE ON DELETE CASCADE )";

            s.executeUpdate(sqlCar);

            String sqlCustomer = "CREATE TABLE IF NOT EXISTS CUSTOMER" +
                    "(ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "NAME VARCHAR(255) UNIQUE NOT NULL, " +
                    "RENTED_CAR_ID INT," +
                    "FOREIGN KEY (RENTED_CAR_ID) references CAR(ID)" +
                    "ON UPDATE CASCADE ON DELETE NO ACTION )";

            s.executeUpdate(sqlCustomer);


            s.executeUpdate("ALTER TABLE COMPANY ALTER COLUMN ID RESTART WITH 1");

        } catch (SQLException | ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public List<Company> getAllCompanies() {
        List<Company> companies = new ArrayList<>();
        try (Connection c = dataBaseConnection.createConnection();
             Statement s = c.createStatement()) {
            String sqlSelectAll = "SELECT * FROM COMPANY";
            ResultSet result = s.executeQuery(sqlSelectAll);
            while (result.next()) {
                companies.add(new Company(Integer.parseInt(result.getString(1)), result.getString(2)));
            }
        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        }

        return companies;
    }

    @Override
    public List<Car> getAllCars() {
        List<Car> cars = new ArrayList<>();
        try (Connection c = dataBaseConnection.createConnection();
             Statement s = c.createStatement()) {
            String sqlSelectAll = "SELECT * FROM CAR";
            ResultSet result = s.executeQuery(sqlSelectAll);
            while (result.next()) {

                cars.add(new Car(
                        Integer.parseInt(result.getString(1)),
                        result.getString(2),
                        Integer.parseInt(result.getString(3))));
            }
        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        }

        return cars;
    }

    @Override
    public List<Car> getAllAvailableCars() {

        List<Car> cars = new ArrayList<>();
        try (Connection c = dataBaseConnection.createConnection();
             Statement s = c.createStatement()) {
            String sqlSelectAll = "SELECT car.id, car.name, car.company_id \n" +
                    "                    FROM car LEFT JOIN customer \n" +
                    "                    ON car.id = customer.rented_car_id \n" +
                    "                    WHERE customer.name IS NULL;";
            ResultSet result = s.executeQuery(sqlSelectAll);
            while (result.next()) {

                cars.add(new Car(
                        Integer.parseInt(result.getString(1)),
                        result.getString(2),
                        Integer.parseInt(result.getString(3))));
            }
        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        }

        return cars;
    }

    @Override
    public List<Customer> getAllCustomers() {
        ArrayList<Customer> customers = new ArrayList<>();

        try (Connection c = dataBaseConnection.createConnection();
             Statement s = c.createStatement()) {
            String allCustomerSql = "SELECT * FROM CUSTOMER";


            ResultSet resultSet = s.executeQuery(allCustomerSql);

            while (resultSet.next()) {
                customers.add(new Customer(
                        Integer.parseInt(resultSet.getString(1)),
                        resultSet.getString(2)

                ));
            }


        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        }

        customers.sort(Comparator.comparingInt(Customer::getId));
        return customers;
    }

    @Override
    public Company getCompany(int companyId) {
        Company company = null;
        try (Connection c = dataBaseConnection.createConnection();
             Statement s1 = c.createStatement();
             Statement s2 = c.createStatement()) {
            String sqlSelectAll = "SELECT * FROM COMPANY WHERE ID =" + companyId;
            ResultSet result = s1.executeQuery(sqlSelectAll);
            while (result.next()) {
                company = new Company(Integer.parseInt(result.getString(1)), result.getString(2));
            }

            String sqlSelectAllCars = "SELECT * FROM CAR where COMPANY_ID = " + Objects.requireNonNull(company).getId();
            ResultSet resultCars = s2.executeQuery(sqlSelectAllCars);
            while (resultCars.next()) {
                company.addCar(new Car(
                        Integer.parseInt(resultCars.getString(1)),
                        resultCars.getString(2),
                        Integer.parseInt(resultCars.getString(3))));

            }


        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
        }

        return company;
    }

    @Override
    public Car getCar(int carId) {
        Car car = null;
        try (Connection c = dataBaseConnection.createConnection();
             Statement s1 = c.createStatement();
        ) {
            String sql1 = "SELECT * FROM CAR WHERE ID =" + carId;
            ResultSet resultSet1 = s1.executeQuery(sql1);

            while (resultSet1.next()) {
                car = new Car(
                        Integer.parseInt(resultSet1.getString(1)),
                        resultSet1.getString(2),
                        Integer.parseInt(resultSet1.getString(3))
                );

            }
        } catch (SQLException | ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return car;
    }

    @Override
    public Customer getCustomer(int customerId) {
        Customer customer = null;
        try (Connection c = dataBaseConnection.createConnection();
             Statement s1 = c.createStatement();
        ) {
            String sql1 = "SELECT * FROM CUSTOMER WHERE ID =" + customerId;
            ResultSet resultSet1 = s1.executeQuery(sql1);

            while (resultSet1.next()) {
                customer = new Customer(
                        Integer.parseInt(resultSet1.getString(1)),
                        resultSet1.getString(2)
                );
                String carId = resultSet1.getString(3);
                customer.setCarId(carId == null ? 0 : Integer.parseInt(carId));
            }
            List<Car> cars = getAllCars();
            for (Car car : cars) {
                if (car.getId() == customer.getCarId()) {
                    customer.setCarId(car.getId());
                }
            }


        } catch (SQLException | ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        return customer;
    }

    @Override
    public void saveCar(Car car) {
        try (Connection c = dataBaseConnection.createConnection();
             Statement s = c.createStatement()) {
            String sql = "INSERT INTO CAR VALUES (DEFAULT,'" + car.getName() + "'," + car.getCompanyId() + ")";
            s.executeUpdate(sql);
        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        }
    }

    @Override
    public void saveCustomer(Customer customer) {
        try (Connection c = dataBaseConnection.createConnection();
             Statement s = c.createStatement()) {
            String sql = "INSERT INTO CUSTOMER VALUES (DEFAULT,'" + customer.getName() + "', NULL)";
            s.executeUpdate(sql);
        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        }
    }

    @Override
    public void saveCompany(Company company) {
        try (Connection c = dataBaseConnection.createConnection();
             Statement s = c.createStatement()) {
            String sql = "INSERT INTO COMPANY VALUES (DEFAULT,'" + company.getName() + "')";
            s.executeUpdate(sql);

        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        }
    }

    @Override
    public void addCarToCustomer(int customerId, int carId) {
        Customer customer = getCustomer(customerId);

        customer.setCarId(carId);

        try (Connection connection = dataBaseConnection.createConnection();
             Statement statement = connection.createStatement()) {
            String updateCustomer = "UPDATE CUSTOMER SET RENTED_CAR_ID =" +
                    (customer.getCarId() == 0 ? "NULL" : customer.getCarId()) +
                    " WHERE ID =" + customer.getId();

            statement.executeUpdate(updateCustomer);

        } catch (SQLException | ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }


}
